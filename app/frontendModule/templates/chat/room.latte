<!DOCTYPE html>
<html>
    <head>
        {include '../../../templates/head.latte'}
        {include '../../../templates/scripts.latte'}
        <link rel="stylesheet" media="screen,projection" type="text/css" href="{!$staticPath}/css/chat.css" />
        <script type="text/javascript" charset="utf-8" n:syntax="double">
            window.AUTHENTICATED = {{$isLogedIn = Nette\Environment::getUser()->isLoggedIn()}};
            window.rid = {{$rid}};
            var Chat = null;
            var ChatClient = new Class({
                Implements:[Events, Options],
                options:{
                    tips:{
                        position:'left',
                        html:true,
                        distance:55,
                        content:function(e){ 
                            var info = JSON.decode(e.get('data-info')),
                                diff = parseInt((new Date().getTime() - info.time)/1000),
                                act = {m:parseInt(diff/60), s:diff%60, type:{idle:'Čte', 'writing':'Píše...', 'textready':'Má rozepsaný text', deleting:'Maže...', offline:'Nepřipojený'}},
                                html = '<img src="' + info.icon + '" style="max-height:50px; vertical-align: top;" />\n' +
                                       '<div style="display:inline-block; margin-left:3px;">\n' +
                                       '<b>' + info.name + '</b><br/>\n' + 
                                       '<i>'+ act.m + ' min. a ' + act.s + ' sec.</i><br/>\n'+
                                       '<span>' + act.type[info.state] + '</span><br/>\n' + 
                                       '<span>' + info.status + '</span>' +
                                       '</div>'; 
                            return html;
                        }
                    },
                    tipsSelector:'div.users',
                    userList:'user-list',
                    glass:'glass',
                    limit:50,
                    input:'msg',
                    typeDelay:800
                },
                initialize:function(t, options){
                    this.setOptions(options);
                    t.registerCmd('chat', this._handle.bind(this));
                    this.transport = t;
                    t.send('chat', {action:'enter', id:rid});
                    t.send('chat', {action:'userlist', id:rid});
                    this.tips = new FloatingTips(this.options.tipsSelector, this.options.tips);
                    this.options.input = $(this.options.input);
                    if(this.options.input)
                        this.options.input.addEvent('keyup', this._typingInfo.bind(this));
                },
                transport:null,
                tips:null,
                showDelete:false,
                toggleDeletes:function(){
                    this.showDelete = !this.showDelete;
                    if(this.showDelete)
                        $$('.cross-delete').removeClass('hide');
                    else
                        $$('.cross-delete').addClass('hide');
                    return this.showDelete;
                },
                connectedUsers:[],
                _typing:{
                    t:null, // Timeout
                    state:'idle',
                    fn:function(){
                        //console.log(this._typing);
                        this._typing.state = $(this.options.input).value.length ? 'textready' : 'idle';
                        this.transport.send('chat',{action:'state', state:this._typing.state, id:rid});
                    }
                },
                _typingInfo:function(){
                    if(this._typing.t) clearTimeout(this._typing.t);
                    if(this._typing.state != 'typing'){
                        this._typing.state = 'typing';
                        this.transport.send('chat',{action:'state', state:this._typing.state, id:rid});
                    }
                    this._typing.t = setTimeout(this._typing.fn.bind(this), this.options.typeDelay);
                },
                _handle:function(msg){
                    //console.log(msg);
                    switch(msg.action){
                        case 'post':
                            var d = new Date();
                            d.setTime(msg.time);
                            new Element('div', {
                                id:msg.id,
                                styles:{
                                    color:msg.color,
                                    'font-size':msg.size || 'inherted'
                                }
                            }).adopt(
                                new Element('a',{
                                    href:'#',
                                    text:'x',
                                    'class':'cross-delete' + (this.showDelete ? '' : ' hide'),
                                    events:{
                                        click:function(e){
                                            if(e) e.stop();
                                            var mid = msg.id;
                                            this.transport.send('chat', {action:'delete', id:rid, messid:mid});
                                        }.bind(this)
                                    }
                                }),
                                new Element('span', {
                                    'class':'datetime',
                                    text:' ' + (d.getHours() < 10 ? '0' : '') + d.getHours() + ':' + (d.getMinutes() < 10 ? '0' : '') + d.getMinutes() + ':' + (d.getSeconds() < 10 ? '0' : '') + d.getSeconds() + ' '
                                }),
                                new Element('strong', {text:msg.from + ': '}),
                                new Element('span', {text:msg.message})
                            ).inject($(this.options.glass), 'top');
                            if(this.options.limit){
                                var c = $$('#' + this.options.glass + ' div'), s = parseInt(typeOf(this.options.limit) == 'number' ? this.options.limit : $(this.options.limit).get('value'));
                                for(var i = s - 1; i < c.length; i++){
                                    c[i].dispose();
                                }
                            }
                            break;
                        case 'queue':
                            for(var i = 0; i < msg.queue.length; i++){
                                AC.fireEvent('cmd_chat', msg.queue[i].data);
                            }
                            break;
                        case 'userlist':
                            $$('#user-list *').dispose(); 
                            this.connectedUsers = msg.list;
                            this.connectedUsers.each(function(usr){
                                var img = usr.state == 'typing' ? 'edit-icon' : (usr.state == 'textready' ? 'notepad-icon' : 'spy');
                                var e = new Element('div', {
                                    'class':'users',
                                    'data-info':JSON.stringify(usr),
                                    text:usr.name + ' '
                                }).adopt(new Element('img', {id:'ty' + usr.name, alt:' - ' + usr.state, src:'http://static.aragorn.cz/images/' + img + '.png', styles:{'vertical-align':'middle'}}));
                                $(this.options.userList).grab(e);
                            }.bind(this));
                            this.tips.attach(this.options.tipsSelector);
                            break;
                        case 'delete':
                            $$('#' + msg.message).dispose();
                            break;
                        case 'force-leave':
                            location.href = '/chat/leave/' + rid + '/' + (msg.silent ? 'silent/' : '');
                            break;
                     }
                },
                send:function(cmd, params){
                    this.transport.send('chat', Object.merge({action:cmd, id:rid}, {params:params}));
                }
            });
            window.addEvent('domready', function(){
                Chat = new ChatClient(AC, {limit:'glass-length'});
                if($('msg')) $('msg').focus();
                $('glass-length').addEvent('change', function(e){
                    console.log('change', this.get('value'));
                    Cookie.write('chat-glass-length', this.get('value'), {duration:365});
                });
                $('glass-length').set('value', Cookie.read('chat-glass-length') || 150);
                if($('frmMsg'))
                    $('frmMsg').addEvent('submit', function(e){
                        new Event(e).stop();
                        var v = this.msg.value;
                        if(v.length){ 
                            if(v[0] == '/'){    
                                var p = v.indexOf(' '), cmd = p == -1 ? v.substr(1) : v.substr(1, v.indexOf(' ')-1), param = p == -1 ? '' : v.substr(++p);
                                switch(cmd){
                                    case 'quit':
                                    case 'exit':
                                    case 'odejit':
                                    case 'leave':
                                        location.href = '/chat/leave/' + rid + '/';
                                        break;
                                    case 'kickall':
                                        if(!confirm('Vyhodit všechny z místnosti?')) break;
                                    default:
                                        Chat.send('cmd', {cmd:cmd, param:param});
                                }
                            }else{
                                AC.send('chat',{action:'post', id:rid, message:this.msg.value}); 
                            }
                            this.msg.value='';
                        } 
                        return false;
                    });
            });
        </script>
    </head>
    <body n:syntax="double">
        <div id="user-list" style="position: fixed; width: 140px; top:20px;right: 0; border-left: 1px dashed gray; bottom: 0; padding: 4px;"></div>
        <div id="glass" style="white-space: pre-wrap; overflow: auto; right: 150px; left: 0; bottom: 35px; top: 0;position: fixed; padding: 16px;"></div>
        <footer>
            {{if $param != "ninja"}}
            <form id="frmMsg">
                Zpráva: <input type="text" name="msg" id="msg" size="40" /> <button type="submit">Odeslat</button>
            </form>
            {{if $user->isAllowed('chat', 'delete')}}
            <button id="showDeletes" onclick="$(this).setStyle('background', Chat.toggleDeletes() ? 'red' : '#339');">Mazáni zpráv</button>
            {{/if}}
            {{else}}
            <a n:href="enter $rid" target="_self">Vstoupit do místnosti</a>
            {{/if}}
            <select name="glassLength" id="glass-length" title="Počet zobrazovaných zpráv">
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="150">150</option>
                <option value="200">200</option>
                <option value="250">250</option>
                <option value="300">300</option>
            </select>
            <div id="constat" title="Connection status: offline" style="display: inline-block; position: relative;">&nbsp;</div>
            <button data-href="{{if $param == "ninja"}}{{link chat:}}{{else}}{{link leave $rid}}{{/if}}" onclick="location.href = $(this).get('data-href');">Odejít</button>
        </footer>
    </body>    
</html>